if(counter>= 1 & counter<=1){
counter <- counter + 1
print(counter)
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
print(counter)
if(counter>= 1 & counter<=1){
counter <- counter + 1
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
print(counter)
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
N <- 50
counter <- 1
for(counter in rnorm(N)){
if(counter>= 1 & counter<=1){
counter <- counter + 1
counter
}
}
answer <- counter / N
answer
MyFirstVector <- c(3, 45, 56, 732)
MyFirstVector <- c(3, 45, 56, 732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
V2 <- c(3L, 12L, 243L, 0L)
is.integer(MyFirstVector)
is.integer(V2)
is.double(V2)
v3 <- c("a", "823", "Hello")
v3 <- c("a", "B23", "Hello")
v3
is.character(v3)
is.numeric(v3)
v3 <- c("a", "B23", "Hello", 7)
v3
is.numeric(v3)
is.character(v3)
seq(1, 15)
1:15
seq(1, 15, 2)
z <- seq(1, 15, 4)
z
rep(3, 100)
d <- rep(3, 50)
d
rep("a", 5)
x <- c(80, 20)
y <- rep(x, 10)
y
x <- c(1, 123, 534, 13,4) #combine
y <- seq(201, 250, 11)    #sequence
z <- rep("Hi!", 3)        #replicate
w<-c("a", "b", "c", "d", "e")
w
w[1]
w[1]
w[2]
w[3]
w[-1]
v<-w[-3]
v
w[1:3]
w[3:5]
w[c(1,3,5)]
w
w
w[c(-2, -4)]
w[c(1,3,5)]   #using vectors to hold index
w
w[c(-2, -4)]
w[c(1,3,5)]   #using vectors to hold index
w[c(-2, -4)]
w[-3, -5]
w[-3, -5]
w[-3: -5]
w[1:2]
-3:-5
q()
a <- c(4,5,1,53,56,6,74,0)
b<-c(5,2,6,3,6,7,3,6,7,8)
length(a)
a <- c(4,5,1,53,56,6,74,0)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_12_VectOps_Prac.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_12_VectOps_Prac.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_12_VectOps_Prac.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_12_VectOps_Prac.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_12_VectOps_Prac.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_12_VectOps_Prac.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_13_VectOps.R', echo=TRUE)
timestamp
timestamp(stamp=date())
##------ Mon Sep 11 07:25:46 2017 ------##
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_13_VectOps.R', echo=TRUE)
c <- a * b
for(i in 1:N){
d[i] <- a[i] * b[i]
}
?rnorm()
?rnorm()
profit <- c(revenue - expenses)
source('E:/Users/Shiv/R/R_Dev/Data/Section3-Homework-Data.R/Section3-Homework-Data.R', echo=TRUE)
profit
profitAfterTax <- c(revenue*0.7 - expenses)
profitAfterTax
profitMargin <- c(profitAfterTax/revenue)
profitMargin
goodMonths <- c(profitAfterTax> mean(profitAfterTax))
goodMonths
badMonths <- c(profitAfterTax< mean(profitAfterTax))
badMonths
bestMonth <- max(profitAfterTax)
worstMonth <- min(profitAfterTax)
bestMonth
worstMonth
i in length(profitAfterTax)
length(profitAfterTax)
for (i in length(profitAfterTax)){
if profitAfterTax[i]>profitAfterTax[i+1]{
bestMonthIs <- i
}
}
for (i in length(profitAfterTax)){
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
for (i in length(profitAfterTax)-1){
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
for (i in length(profitAfterTax)-1){
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
bestMonthIs
for (i in length(profitAfterTax)-1){
print(i)
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
bestMonthIs
for (i in 1:length(profitAfterTax)-1){
print(i)
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
for (i in 1:(length(profitAfterTax)-1)){
print(i)
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
for (i in 1:(length(profitAfterTax)-1)){
print(i)
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
}
bestMonthIs
for (i in 1:(length(profitAfterTax)-1)){
print(i)
if(profitAfterTax[i]>=profitAfterTax[i+1]){
bestMonthIs <- i
}
}
bestMonthIs
#find the best month and the worst month
for (i in 1:(length(profitAfterTax)-1)){
#  print(i)
if(profitAfterTax[i]>=profitAfterTax[i+1]){
bestMonthIs <- i
}
if(profitAfterTax[i]<=profitAfterTax[i+1]){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:(length(profitAfterTax)-1)){
#  print(i)
if(profitAfterTax[i]>profitAfterTax[i+1]){
bestMonthIs <- i
}
if(profitAfterTax[i]<profitAfterTax[i+1]){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:(length(profitAfterTax)){
#  print(i)
if(profitAfterTax[i]=max(profitAfterTax)){
bestMonthIs <- i
}
if(profitAfterTax[i]=min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:(length(profitAfterTax))){
#  print(i)
if(profitAfterTax[i]=max(profitAfterTax)){
bestMonthIs <- i
}
if(profitAfterTax[i]=min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:(length(profitAfterTax))){
#  print(i)
if(profitAfterTax[i]=max(profitAfterTax)){
print(profitAfterTax[i], max(profitAfterTax))
bestMonthIs <- i
}
if(profitAfterTax[i]=min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:(length(profitAfterTax))){
#  print(i)
if(profitAfterTax[i]=max(profitAfterTax)){
print(profitAfterTax[i], max(profitAfterTax))
bestMonthIs <- i
}
if(profitAfterTax[i]=min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
1:(length(profitAfterTax)
1:(length(profitAfterTax))
profitAfterTax
for (i in 1:length(profitAfterTax)){
#  print(i)
if(profitAfterTax[i]=max(profitAfterTax)){
print(profitAfterTax[i], max(profitAfterTax))
bestMonthIs <- i
}
if(profitAfterTax[i]=min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:length(profitAfterTax)){
#  print(i)
if(profitAfterTax[i]==max(profitAfterTax)){
print(profitAfterTax[i], max(profitAfterTax))
bestMonthIs <- i
}
if(profitAfterTax[i]==min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:length(profitAfterTax)){
#  print(i)
if(profitAfterTax[i]==max(profitAfterTax)){
print(profitAfterTax[i])
bestMonthIs <- i
}
# if(profitAfterTax[i]==min(profitAfterTax)){
#   worstMonthIs <- i
# }
}
bestMonthIs
worstMonthIs
profitAfterTax
for (i in 1:length(profitAfterTax)){
#  print(i)
if(profitAfterTax[i]==max(profitAfterTax)){
print(profitAfterTax[i], max(profitAfterTax))
bestMonthIs <- i
}
if(profitAfterTax[i]==min(profitAfterTax)){
worstMonthIs <- i
}
}
bestMonthIs
worstMonthIs
profitAfterTax
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("Rccp")
install.packages("Rcpp")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("Rcpp")
library(ggplot2)
library(Rcpp)
library(Rcpp)
library(Rcpp)
library(ggplot2)
qplot(data=stats, x = Internet.users)
stats <- read.csv("E:\\Users\\Shiv\\R\\R_Dev\\R_Udemy\\R_Fundamentals\\DemographicData.csv")
library(ggplot2)
qplot(data=stats, x = Internet.users)
qplot(data=stats, x = Internet.users)
qplot(data=stats, x=Income.Group, y=Birth.rate)
qplot(data=stats, x=Income.Group, y=Birth.rate, size=I(3))
qplot(data=stats, x=Income.Group, y=Birth.rate, size=I(3), color=I("blue"))
qplot(data=stats, x=Income.Group, y=Birth.rate, geom="boxplot")
stats[stats$Income.Group == "Low income"]
stats[,stats$Income.Group == "Low income"]
stats[stats$Income.Group == "Low income",]
stats[stats$Income.Group == "Low income" & min(stats$Birth.rate),]
stats[stats$Income.Group == "Low income" & stats$Birth.rate==min(stats$Birth.rate),]
stats[stats$Income.Group == "Low income" & stats$Birth.rate==minimum(stats$Birth.rate),]
stats[stats$Income.Group == "Low income" & stats$Birth.rate==min(stats$Birth.rate),]
stats[stats$Income.Group == "Low income" & stats$Birth.rate==max(stats$Birth.rate),]
stats[stats$Income.Group == "Low income" & stats$Birth.rate==min (stats$Birth.rate),]
stats[stats$Income.Group == "Low income" & stats$Birth.rate== min(stats$Birth.rate),]
qplot(data=stats, x=Internet.users)
qplot(data=stats, x=Internet.users, y=Birth.rate)
qplot(data=stats, x=Internet.users, y=Birth.rate, size=I(3))
qplot(data=stats, x=Internet.users, y=Birth.rate, size=I(3), color=I("red"))
qplot(data=stats, x=Internet.users, y=Birth.rate, size=I(3), color=Income.Group)
qplot(data=stats, x=Internet.users, y=Birth.rate, size=Birth.rat, color=I("red"))
qplot(data=stats, x=Internet.users, y=Birth.rate, size=Birth.rate, color=I("red"))
qplot(data=stats, x=Internet.users, y=Birth.rate, size=Birth.rate, color=Income.Group)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_21_BasketBallInsights.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_18_matplot.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_17_MatrixOps.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_Fundamentals/BasketBallAnalysis.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_Fundamentals/s4-BasketballData.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_Fundamentals/Section4-Homework-Data.R', echo=TRUE)
source('E:/Users/Shiv/R/R_Dev/R_Udemy/R_Fundamentals/Section4-Homework-FillInTheBlanks.R', echo=TRUE)
getwd()
getwd()
setwd("E:\Users\Shiv\R\R_Dev\R_Udemy")
setwd("E:\\Users\\Shiv\\R\\R_Dev\\R_Udemy")
getwd()
